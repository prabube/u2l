{"version":3,"sources":["Msg.js","App.js","serviceWorker.js","index.js"],"names":["Msg","push","Child","id","useParams","App","src","alt","Math","floor","random","length","exact","path","children","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oPAAIA,G,MAAI,IACRA,EAAIC,KAAJ,0lBAKAD,EAAIC,KAAJ,osBAOAD,EAAIC,KAAJ,okBAIAD,EAAIC,KAAJ,owBAMAD,EAAIC,KAAJ,wiBAIAD,EAAIC,KAAJ,2yBAKAD,EAAIC,KAAJ,yuBAKAD,EAAIC,KAAJ,8lBAIAD,EAAIC,KAAJ,ipCASAD,EAAIC,KAAJ,gkCAWeD,QC1Bf,SAASE,IAAQ,IAGTC,EAAOC,cAAPD,GAEN,OACE,yBAAKA,GAAG,YAAW,sCAAaA,EAAb,YAIRE,MAjCf,WACE,OAEE,kBAAC,IAAD,KACA,yBAAKF,GAAG,aACZ,yBAAKA,GAAG,WAAWG,IAAI,aAAaC,IAAI,wBAExC,yBAAKJ,GAAG,SAASG,IAAI,kBAAkBC,IAAI,wBAE3C,yBAAKJ,GAAG,UAAUG,IAAI,gBAAgBC,IAAI,wBAExC,yBAAKJ,GAAG,OAAR,KAAiBH,EAAIQ,KAAKC,MAAMD,KAAKE,SAAYV,EAAIW,UAErD,kBAAC,IAAD,KACQ,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,OAAOC,SAAU,kBAACZ,EAAD,YCdzBa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c967c4f4.chunk.js","sourcesContent":["var Msg=[];\r\nMsg.push(`இந்த புத்தாண்டில்\r\nஉங்கள் குடும்பமும்\r\nநீங்களும் எல்லா வளமும்\r\nநலமும் பெற வேண்டும்\r\nஇனிய புத்தாண்டு வாழ்த்துக்கள்`);\r\nMsg.push(`நிறைந்த வளம்\r\nமிகுந்த சந்தோசம்\r\nவெற்றி இவற்றை\r\nஎல்லாம் இந்த\r\nஇனிய புத்தாண்டு\r\nஉங்களுக்கு கொண்டுவரட்டும்\r\nஇனிய புத்தாண்டு வாழ்த்துக்கள்`);\r\nMsg.push(`வாழ்கையை கொண்டாடுங்கள்\r\nபுதிய துவக்கத்தை கொண்டாடுங்கள்\r\nஉங்களுக்கு என்னுடைய\r\nஇனிய புத்தாண்டு வாழ்த்துக்கள்`);\r\nMsg.push(`இந்த வருட புத்தாண்டு\r\nஉங்களுக்கு உங்களது வாழ்வில்\r\nமிகுந்த சந்தோசங்களையும்\r\nவளங்களையும் கொண்டுவர\r\nவாழ்த்துகிறேன்\r\nஇனிய புத்தாண்டு வாழ்த்துக்கள்`);\r\nMsg.push(`இந்த இனிய புத்தாண்டு\r\nஉங்களுக்கு ஒரு இனிய\r\nசிறந்த துவக்கமாக இருக்கட்டும்\r\nஇனிய புத்தாண்டு வாழ்த்துக்கள்`);\r\nMsg.push(`மீண்டும் வசந்தம் எழுந்துவிட்டது\r\nமீண்டும் சோலை கொழுந்து விட்டது\r\nஇதயம் இதயம் மலர்ந்து விட்டது\r\nஇசையின் கதவு திறந்து விட்டது\r\nஇனிய புத்தாண்டு வாழ்த்துகள்`);\r\nMsg.push(`சுற்றும் உலகின் விட்டம் தெரியும்\r\nசூரியன் பூமி தூரமும் தெரியும்\r\nகங்கை நதியின் நீளமும் தெரியும்\r\nவங்க கடலின் ஆழமும் தெரியும்\r\nவருக புத்தாண்டே`);\r\nMsg.push(`விரும்பிய யாவும் கிடைக்கபெற்று\r\nமன நிம்மதியும் சந்தோசமும்\r\nஉங்கள் வாழ்வில் நிரம்பி வழிய\r\nமனமார்ந்த வாழ்த்துக்கள்`);\r\nMsg.push(`இனிய புத்தாண்டு நல் வாழ்த்துக்கள்\r\nஎன் அன்பு உள்ளங்களே\r\nதேவைகள் தீர்வதில்லை\r\nஎதுவும் முடிவு அல்ல\r\nஎல்லாமே அடுத்த\r\nநல்லதுக்கான தொடக்கமே\r\nமகிழ்ச்சியுடன் புத்தாண்டை வரவேற்று\r\nநலமுடனும் வளமுடனும்\r\nவாழ்ந்திட நல் வாழ்த்துக்கள்`);\r\nMsg.push(`புத்தாண்டில்\r\nபுதிய சிந்தனை\r\nபுதிய முயற்சி\r\nபுதிய எண்ணங்கள் பூக்கட்டும்\r\nநட்புகளுக்கும்\r\nசொந்தங்களுக்கும்\r\nதமிழ் இனத்துக்கும்\r\nஉயிரோடு இணைந்த\r\nஅனைத்து தமிழ் உறவுகளுக்கும்\r\nஇனிய புத்தாண்டு நல்வாழ்த்துக்கள்`);\r\n\r\nexport default Msg;\r\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useParams\n} from \"react-router-dom\";\nimport './App.css';\nimport Msg from './Msg';\n\n\n\nfunction App() {\n  return (\n    \n    <Router>\n    <div id=\"container\">\n<img id=\"startimg\" src=\"./star.gif\" alt=\"Happy New Year 2020\"/>\n\n<img id=\"hnyimg\" src=\"./happy-new.gif\" alt=\"Happy New Year 2020\"/>\n\n<img id=\"yearimg\" src=\"./2020_NY.gif\" alt=\"Happy New Year 2020\"/>\n\n  <div id=\"msg\">  {Msg[Math.floor(Math.random() * (Msg.length))]}</div>\n\n  <Switch>\n          <Route exact path=\"/:id\" children={<Child />} />\n  </Switch>\n\n\n</div>\n</Router>\n  );\n}\n\nfunction Child() {\n  // We can use the `useParams` hook here to access\n  // the dynamic pieces of the URL.\n  let { id } = useParams();\n\n  return (\n    <div id=\"username\"><h2>&#9825; {id} &#9825;</h2></div>    \n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}